name: Pull requests tests

on: 
  pull_request:

jobs:
  backend_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      working-directory: ./app_flask
    - name: Analysing the backend code with pylint
      run: pylint application.py src tests
      working-directory: ./app_flask
    - name: Unit testing by Pytest
      env: 
        USER_KEY : ${{ secrets.USER_KEY }}
        GEMINI_API_KEY : ${{ secrets.GEMINI_API_KEY }}
        REACT_APP_AZURE_STORAGE_ACCOUNT : ${{ secrets.REACT_APP_AZURE_STORAGE_ACCOUNT }}
        REACT_APP_AZURE_STORAGE_SAS_TOKEN : ${{ secrets.REACT_APP_AZURE_STORAGE_SAS_TOKEN }} 
      run: python3 -m unittest discover tests
      working-directory: ./app_flask

  frontend_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ["20.x"]
    steps:
    - uses: actions/checkout@v4
    - name:  Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    - name: Initialize frontend app
      run: npm install
      working-directory: ./app_react
    - name: Run frontend unittest
      run: npm run test
      working-directory: ./app_react
    - name: Linting frontend
      run: npm run lint
      working-directory: ./app_react

